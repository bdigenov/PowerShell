{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "environment-suffix": {
            "type": "string",
            "minLength": 1
        },
        "deployment-location": {
            "type": "string",
            "minLength": 1,
            "defaultValue": "South Central US"
        },
        "identityId": {
            "type":"string"
        },
        "utcValue": {
            "type": "string",
            "defaultValue": "[utcNow()]"
        }
    },
    "variables": {
        "deployment-keyvault-name": "[concat('wwl', parameters('environment-suffix'), 'deployment')]",
        "api-mgmt-cert-name": "[concat('wwl', parameters('environment-suffix'), 'cert')]",
        "api-mgmt-cert-subject": "[concat('CN=wwl', parameters('environment-suffix'), '.azurewebsites.net')]",
        "api-mgmt-cert-issuer": "[concat('CN=wwl', parameters('environment-suffix'), '.azurewebsites.net')]"
    },
    "resources": [    
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2019-10-01-preview",
            "name": "CreateAddCertificate",
            "location": "[parameters('deployment-location')]",
            "dependsOn": [
                "[variables('deployment-keyvault-name')]"
            ],
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                "[parameters('identityId')]": {
                }
                }
            },
            "kind": "AzurePowerShell",
            "properties": {
                "forceUpdateTag": "[parameters('utcValue')]",
                "azPowerShellVersion": "3.0",
                "timeout": "PT30M",
                "arguments": "[format(' -vaultName {0} -certificateName {1} -subjectName {2}', variables('deployment-keyvault-name'), variables('api-mgmt-cert-name'), variables('api-mgmt-cert-subject'))]",
                "scriptContent": "
                    param(
                        [string] [Parameter(Mandatory=$true)] $vaultName,
                        [string] [Parameter(Mandatory=$true)] $certificateName,
                        [string] [Parameter(Mandatory=$true)] $subjectName
                    )

                    $ErrorActionPreference = 'Stop'
                    $DeploymentScriptOutputs = @{}

                    $existingCert = Get-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName

                    if ($existingCert -and $existingCert.Certificate.Subject -eq $subjectName) {

                        Write-Host 'Certificate $certificateName in vault $vaultName is already present.'

                        $DeploymentScriptOutputs['certThumbprint'] = $existingCert.Thumbprint

                        $Bytes = [System.Text.Encoding]::Unicode.GetBytes($existingCert.Thumbprint)
                        $EncodedText = [Convert]::ToBase64String($Bytes)
                        $DeploymentScriptOutputs['certBase64'] = $EncodedText
                                        
                        $existingCert | Out-String
                    }
                    else {
                        $policy = New-AzKeyVaultCertificatePolicy -SubjectName $subjectName -IssuerName Self -ValidityInMonths 12 -Verbose

                        Add-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName -CertificatePolicy $policy -Verbose

                        $newCert = Get-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName

                        # it takes a few seconds for KeyVault to finish
                        $tries = 0
                        do {
                        Write-Host 'Waiting for certificate creation completion...'
                        Start-Sleep -Seconds 10
                        $operation = Get-AzKeyVaultCertificateOperation -VaultName $vaultName -Name $certificateName
                        $tries++

                        if ($operation.Status -eq 'failed')
                        {
                            throw 'Creating certificate $certificateName in vault $vaultName failed with error $($operation.ErrorMessage)'
                        }

                        if ($tries -gt 120)
                        {
                            throw 'Timed out waiting for creation of certificate $certificateName in vault $vaultName'
                        }
                        } while ($operation.Status -ne 'completed')

                        $DeploymentScriptOutputs['certThumbprint'] = $newCert.Thumbprint

                        Write-Output $newCert.Thumbprint

                        $Bytes = [System.Text.Encoding]::Unicode.GetBytes($newCert.Thumbprint)
                        $EncodedText = [Convert]::ToBase64String($Bytes)
                        $DeploymentScriptOutputs['certBase64'] = $EncodedText
                                        
                        $newCert | Out-String
                    }
                    ",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"              
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('deployment-keyvault-name'),'/', 'api-mgmt-cert-subject')]",
            "apiVersion": "2016-10-01",
            "dependsOn": [
                "CreateAddCertificate"
            ],
            "properties": {
                "contentType": "text/plain",
                "value": "[variables('api-mgmt-cert-subject')]"
            },
            "tags": {
                "displayName": "api-mgmt-cert-subject"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('deployment-keyvault-name'),'/', 'api-mgmt-cert-issuer')]",
            "apiVersion": "2016-10-01",
            "dependsOn": [
                "CreateAddCertificate"
            ],
            "properties": {
                "contentType": "text/plain",
                "value": "[variables('api-mgmt-cert-issuer')]"
            },
            "tags": {
                "displayName": "api-mgmt-cert-issuer"
            }  
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('deployment-keyvault-name'),'/', 'api-mgmt-cert-thumbprint')]",
            "apiVersion": "2016-10-01",
            "dependsOn": [
                "CreateAddCertificate"
            ],
            "properties": {
                "contentType": "text/plain",
                "value": "[reference('CreateAddCertificate').outputs.certThumbprint]"
            },
            "tags": {
                "displayName": "api-mgmt-cert-thumbprint"
            }  
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('deployment-keyvault-name'),'/', 'api-mgmt-cert-base64')]",
            "apiVersion": "2016-10-01",
            "dependsOn": [
                "CreateAddCertificate"
            ],
            "properties": {
                "contentType": "text/plain",
                "value": "[reference('CreateAddCertificate').outputs.certBase64]"
            },
            "tags": {
                "displayName": "api-mgmt-cert-base64"
            }  
        }
    ]
}